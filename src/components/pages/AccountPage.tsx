import { useState, useEffect } from 'react';
import axios from 'axios';
import { Button } from '../ui/button';
import { Card } from '../ui/card';
import { Loader2 } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const API_BASE_URL = 'https://bullheadedly-mobilizable-paulene.ngrok-free.dev'; // ‚Üê –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!

export function AccountPage() {
  const [debugInfo, setDebugInfo] = useState<string>('');
  const [rawData, setRawData] = useState<any>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      setDebugInfo('üîç –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è...');

      const token = localStorage.getItem('casino_jwt_token');–´
      if (!token) {
        setDebugInfo('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login...');
        setTimeout(() => navigate('/login'), 2000);
        return;
      }

      setDebugInfo(`üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫: ${API_BASE_URL}/api/v1/user/profile`);

      try {
        const response = await axios.get(`${API_BASE_URL}/api/v1/user/profile`, {
          headers: { Authorization: `Bearer ${token}` },
          timeout: 10000,
        });

        setRawData(response.data);
        setDebugInfo('‚úÖ –£—Å–ø–µ—Ö! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª—å...');
        // –ï—Å–ª–∏ –¥–æ–π–¥—ë–º —Å—é–¥–∞ ‚Äî –∑–Ω–∞—á–∏—Ç, –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Üí –º–æ–∂–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å
      } catch (err: any) {
        let msg = 'üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:\n';
        if (err.code === 'ECONNABORTED') {
          msg += '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 10 —Å–µ–∫)';
        } else if (err.response) {
          msg += `–°—Ç–∞—Ç—É—Å: ${err.response.status}\n`;
          msg += `–û—Ç–≤–µ—Ç: ${JSON.stringify(err.response.data, null, 2)}`;
        } else if (err.request) {
          msg += '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, CORS –∏–ª–∏ ngrok –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)';
        } else {
          msg += err.message || String(err);
        }
        setDebugInfo(msg);
        console.error(err);
      }
    };

    fetchData();
  }, [navigate]);

  // –ü–û–ö–ê –ù–ï –ë–£–î–ï–ú –†–ï–ù–î–ï–†–ò–¢–¨ –ü–†–û–§–ò–õ–¨ ‚Äî –°–ù–ê–ß–ê–õ–ê –£–ë–ï–î–ò–ú–°–Ø, –ß–¢–û –í–°–Å –†–ê–ë–û–¢–ê–ï–¢
  if (rawData) {
    return (
      <div className="p-4 bg-background text-foreground min-h-screen">
        <h2 className="text-2xl font-bold mb-4">‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω!</h2>
        <pre className="bg-card p-4 rounded text-sm overflow-auto">
          {JSON.stringify(rawData, null, 2)}
        </pre>
        <Button onClick={() => window.location.reload()} className="mt-4">
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-background p-4 text-foreground">
      <Loader2 className="w-10 h-10 animate-spin text-primary mb-4" />
      <p className="text-center text-muted-foreground whitespace-pre-wrap">
        {debugInfo}
      </p>
      <Button
        onClick={() => window.location.reload()}
        className="mt-6"
        variant="outline"
      >
        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
      </Button>
    </div>
  );
}