const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º generateSessionToken
const { useOneTimeToken, generateSessionToken } = require('../services/authService');
const prisma = require('../../prismaClient'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º prisma –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

// ...

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ AuthHandler.tsx)
router.post('/login-with-token', async(req, res) => {
    const { token: oneTimeToken } = req.body;

    if (!oneTimeToken) {
        return res.status(400).json({ success: false, error: 'One-time token is required' });
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä–∫–∞ 'isUsed' –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ!
    const user = await useOneTimeToken(oneTimeToken); 

    if (!user) {
        // === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò (–û—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ===
        console.error(`[AUTH ERROR 401] Token rejected: ${oneTimeToken}`);
        const rejectedToken = await prisma.oneTimeAuthToken.findUnique({ where: { token: oneTimeToken } });

        if (rejectedToken) {
            const expired = rejectedToken.expiresAt < new Date();
            const used = rejectedToken.isUsed;

            console.error(`[TOKEN STATUS] Used: ${used}, Expired: ${expired} (Expires at: ${rejectedToken.expiresAt.toISOString()})`);
        } else {
            console.error('[TOKEN STATUS] Token not found in DB.');
        }
        // ==========================

        return res.status(401).json({ success: false, error: 'Invalid, expired, or used token' });
    }

    // --- –õ–û–ì–ò–ö–ê –£–°–ü–ï–®–ù–û–ì–û –í–•–û–î–ê ---

    // 1. –°–æ–∑–¥–∞–µ–º JWT-—Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
    const sessionToken = generateSessionToken(user);
    
    // -----------------------------------------------------------------
    // >>> –í–†–ï–ú–ï–ù–ù–´–ô –•–ê–ö: –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –ë–õ–û–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø,
    // —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∞!
    /* try {
        await prisma.oneTimeAuthToken.update({
            where: { token: oneTimeToken },
            data: { isUsed: true },
        });
        console.log(`‚úÖ One-time token ${oneTimeToken} successfully marked as used.`);
    } catch (dbError) {
        console.error('‚ùå Failed to mark one-time token as used:', dbError);
    }
    */
    // -----------------------------------------------------------------
    
    console.log(`üéâ Successful login via token: ${oneTimeToken}. Issued Session Token.`);
    
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return res.json({ 
        success: true, 
        token: sessionToken, 
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
        user: { 
            id: user.id, 
            username: user.username, 
            firstName: user.firstName 
        } 
    });
});

module.exports = router;